
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            Int         @id @default(autoincrement())
  first_name    String
  last_name     String
  email         String      @unique
  password_hash String
  created_at    DateTime    @default(now())
  role          String      @default("user")
  videos        Video[]
  comments      Comment[]
  likes         Like[]
  playlists     Playlist[]
}

model Video {
  id            Int             @id @default(autoincrement())
  title         String          @unique
  slug          String          @unique
  description   String?
  duration      String?
  views         Int             @default(0)
  uploaded      DateTime        @default(now())
  thumbnail_url String?
  video_url     String
  subtitle      String?
  uploader_id   Int
  tags          String[]
  meta_data     Json?
  display_order Int?
  type          String?
  creator_id    Int?
  uploader      User            @relation(fields: [uploader_id], references: [id], onDelete: Cascade)
  creator       Creator?        @relation(fields: [creator_id], references: [id], onDelete: SetNull)
  comments      Comment[]
  likes         Like[]
  categories    VideoCategory[]
  playlists     PlaylistVideo[]
}

model Short {
  id            Int       @id @default(autoincrement())
  title         String    @unique
  slug          String    @unique
  video_url     String
  thumbnail_url String?
  views         String?
  creator_id    Int?
  creator       Creator?  @relation(fields: [creator_id], references: [id], onDelete: SetNull)
}

model Image {
  id        Int    @id @default(autoincrement())
  title     String
  image_url String
}

model Playlist {
  id      Int             @id @default(autoincrement())
  name    String
  user_id Int
  user    User            @relation(fields: [user_id], references: [id], onDelete: Cascade)
  videos  PlaylistVideo[]
}

model PlaylistVideo {
  playlist_id Int
  video_id    Int
  playlist    Playlist @relation(fields: [playlist_id], references: [id], onDelete: Cascade)
  video       Video    @relation(fields: [video_id], references: [id], onDelete: Cascade)

  @@id([playlist_id, video_id])
}

model Comment {
  id         Int      @id @default(autoincrement())
  text       String
  user_id    Int
  video_id   Int
  created_at DateTime @default(now())
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  video      Video    @relation(fields: [video_id], references: [id], onDelete: Cascade)
}

model Like {
  user_id  Int
  video_id Int
  user     User  @relation(fields: [user_id], references: [id], onDelete: Cascade)
  video    Video @relation(fields: [video_id], references: [id], onDelete: Cascade)

  @@id([user_id, video_id])
}

model SiteSetting {
  key   String @unique
  value Json
}

model Category {
  id     Int             @id @default(autoincrement())
  name   String          @unique
  videos VideoCategory[]
}

model Creator {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  image_url   String?
  description String?
  videos      Video[]
  shorts      Short[]
}

model VideoCategory {
  video_id    Int
  category_id Int
  video       Video    @relation(fields: [video_id], references: [id], onDelete: Cascade)
  category    Category @relation(fields: [category_id], references: [id], onDelete: Cascade)

  @@id([video_id, category_id])
}
