# How to Deploy Your Backend to Render.com (Free Tier)

This guide will walk you through deploying your Node.js backend and a free PostgreSQL database on Render.com.

---

### Part 1: Create a PostgreSQL Database on Render

First, you need a live database for your backend to connect to.

1.  **Log in to Render:** Go to `https://dashboard.render.com`.
2.  **Create a New Database:**
    *   Click the **New +** button and select **PostgreSQL**.
    *   Give your database a unique name (e.g., `videoblast-db`).
    *   Select a region close to you.
    *   Make sure the **Free** plan is selected.
    *   Click **Create Database**.
3.  **Wait for the Database:** It will take a few minutes for your database to become available.
4.  **Copy the "Internal" Database URL:** Once it's ready, go to your new database's page in Render. In the "Info" section, find the **Internal Database URL** and copy it. You will need this in the next part.

---

### Part 2: Deploy Your Backend as a Web Service

Now, you'll deploy the backend code and connect it to the database you just created.

1.  **Create a New Web Service:**
    *   In the Render dashboard, click **New +** and select **Web Service**.
    *   Connect your GitHub account and select your `videoblast` repository.
2.  **Configure the Web Service:**
    *   **Name:** Give your service a name (e.g., `videoblast-backend`).
    *   **Region:** Choose the same region as your database.
    *   **Branch:** `main` (or your primary branch).
    *   **Root Directory:** `backend` (This is VERY important - it tells Render to only use the code in the `backend` folder).
    *   **Runtime:** `Node`.
    *   **Build Command:** `npm install && npm run build`
    *   **Start Command:** `npm start`
    *   **Plan:** Make sure you select the **Free** plan.
3.  **Add Environment Variables:**
    *   Before deploying, click on **Advanced**.
    *   Click **Add Environment Variable**.
    *   **Key:** `DATABASE_URL`
    *   **Value:** Paste the "Internal Database URL" you copied from your Render PostgreSQL database.
    *   **Key:** `JWT_SECRET`
    *   **Value:** Enter a long, random, secret string here (e.g., `your-super-secret-jwt-string-that-is-long`).
4.  **Deploy:**
    *   Click **Create Web Service**.
    *   Render will now start building and deploying your backend. You can watch the logs.

---

### Part 3: Run Database Migrations

Your backend is deployed, but the database is empty. You need to run the Prisma migrations to create all the tables.

1.  **Open the Shell:** In your deployed backend's page on Render, go to the **Shell** tab.
2.  **Run the Migration Command:** The shell will connect. Once it's ready, type the following command and press Enter:
    ```bash
    npx prisma migrate deploy
    ```
3.  **Verify:** The command should report that it has successfully applied your migrations. Your database tables are now created.

---

### Part 4: Connect Your Vercel Frontend

Finally, tell your Vercel frontend where to find your new live backend.

1.  **Get Your Backend URL:** On your backend's page in Render, copy the URL at the top of the page (it will look like `https://your-service-name.onrender.com`).
2.  **Go to Vercel:** Open your frontend project on Vercel.
3.  **Set Environment Variable:**
    *   Go to **Settings** -> **Environment Variables**.
    *   Add a new variable:
    *   **Name:** `NEXT_PUBLIC_API_URL`
    *   **Value:** Paste your Render backend URL and add `/api` to the end. For example: `https://videoblast-backend.onrender.com/api`
4.  **Redeploy Vercel:** Go to the **Deployments** tab in Vercel and trigger a new deployment for the `main` branch to make it use the new environment variable.

Your site should now be fully functional, with the Vercel frontend communicating with your Render.com backend!
